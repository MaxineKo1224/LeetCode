https://leetcode.com/problems/two-sum/

내 c++ 풀이

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> idx;
        for(int i = 0; i<nums.size(); i++){
            for(int j = i+1; j<nums.size(); j++){
                if(nums[i]+nums[j]==target){
                    idx.push_back(i);
                    idx.push_back(j);
                }
            }
        }
        return idx;
        
    }
};
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//Submit 통과는 했지만 속도가 매우 느렸다.
//다른 유저들의 solution을 보니까 
//unordered_map 이라는것을 사용했다.

//Unordered map is an associative container that contains key-value pairs with unique keys.
//파이썬의 dictionary 같은건가 보다. key-value로 이루어져 있다. 
//예시로 쉽게 이해해보기.
//편의를 위해 using namespace std; 를 기본으로 깔고 간다.
++++++++++++++++++++++++++++++++++++++++++++++++++
unordered_map<int, int> map = {
     {"RED","#FF0000"},
     {"GREEN","#00FF00"},
     {"BLUE","#0000FF"}
};
+++++++++++++++++++++++++++++++++++++++++++++++++
//map을 이렇게 정의해준뒤 Iterate 해본다.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
for(const auto& n : map) {
    cout << "Key:[" << n.first << "] Value:[" << n.second << "]\n";
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//그럼 아주 멋지게도 output이 이렇게 나타난다.
Key:[RED] Value:[#FF0000]
Key:[BLUE] Value:[#0000FF]
Key:[GREEN] Value:[#00FF00]
//key와 value를 가리키기 위해서 first와 second를 사용했다는 점이 특이한점 같다. 

//unordered_map 을 이용한 C++ 코드
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> hash;
        for (int i = 0; i<nums.size(); ++i) {
            auto it = hash.find(target - nums[i]);
            if (it != hash.end()) 
                return vector<int> {i, it->second};
            
            hash[nums[i]] = i;
        }
    }

};

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//이 문제에서 헷갈리는 점은
//Given nums = [2, 7, 11, 15] 이라 할 때, 인덱스 값이 key값이 되고 배열의 요소가 value값이 될거 같은데
//반대로 2,7,11,15가 key값이 되고 이들의 index값이 value값이 된다는점.
//이 점을 잘 인지하면 덜 헷갈릴수 있다~ 
//그리고 처음 hash container는 empty라는 점을 제발 간과하지 말자 ~~!! 


//사실 이 문제는 아주 옛날에 Python으로 풀었던 문제다. 다시 푼건 C++과 Java공부를 하기 위함이었다. (Java공부가 더 큰 목적.)
//Java에서도 hashmap이 사용되었다. 코드를 보면서 Java의 기본 문법에 대해서 공부해봤다.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int[] result = new int[2];
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i = 0; i < numbers.length; i++)
        {
            if(map.containsKey(target - numbers[i]))
            {
                result[1] = i;
                result[0] = map.get(target-numbers[i]);
                return result;
            }
            map.put(numbers[i], i);
        }
        return result;
        
    }
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// 새로운 array를 (이 경우에는 int array)를 create 하는 방법
//int[] result = new int[2]; 이 숫자 2 가 원소개수 2개를 의미한다는 점이 좀 신박했다; idx번호로 친숙하니까.....색달..
//hashmap 도 마찬가지로 key,value로 이루어져 있다.
//The HashMap class has many useful methods. For example, to add items to it, use the put() method:
//put 메소드를 이용해서 새로운 (K,V)를 add 할 수 있다.
//value에 접근하기 위해서는 get 메소드와 Key를 이용하면 된다 !!!!
//To access a value in the HashMap, use the get() method and refer to its key:

