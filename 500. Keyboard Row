내가 풀지 못했다.; 
python에는 issubset 이라는 함수가 있다. 
그래서 이런식의 짧은 코드가 가능하다.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
def findWords(self, words: List[str]) -> List[str]:
	r, res = ["qwertyuiop","asdfghjkl","zxcvbnm"], []    
	for word1 in words:
            word = set(word1.lower())
	        if word.issubset(r[0]) or word.issubset(r[1]) or word.issubset(r[2]): 
                    res.append(word1)
	return res
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
그리고 기호로는 <= 이런식으로 나타내는듯.
물론 있는 함수를 활용해서 문제를 푸는건 잘못된게 없고
쓰라고 함수를 만든거니까 쓰면 좋은거긴 한데..
근데 이게 그러면 알고리즘을 짠다기 보다는
필요한 함수 떠올리기가 되지 않나?
그렇다면 issubset의 내적인(?) 알고리즘을 알고싶다. 




words배열에 있는 원소안에 있는 단어 하나하나를 
어떻게 키보드의 열과 비교해야 되는지
비교해서 없으면 다음 키보드 열로 어떤 식으로 넘어가야 되는지
첫번째 단어, 두번째 단어, 세번째 단어 ... 모든 단어들이 같은 열에 있는지 비교하는것 
등 모든 핵심 알고리즘을 나는 짤수 없었다. (왜살죠?. 하핳..)

C++ 코드 몇개 
(1)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
class Solution {
public:
	vector<string> findWords(vector<string>& words){
		vector<int> dict(26);
		vector<string> rows = {"QWERTYUIOP", "ASDFGHJKL", "ZXCVBNM"};
		for(int i = 0; i<rows.size(); i++){
		    for(auto c : rows[i]) dict[c-'A'] = 1 << i;
		}
		vector<string> res;
		for(auto w : words){
		    int r = 7;
		    for(auto c : w){
		        r &= dict[toupper(c) - 'A'];
			if(r == 0) break;
		    }
		    if(r) res.push_back(w);
		}
		
		return res;
	}
}; 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

키보드 열 마다 배열을 만드는 방식이 있고
배열을 딱 하나만 만드는 방식이 있는데
이 코드는 배열을 하나 만들어서 
비트연산자로 각 알파벳에 고유 숫자를 부여한다.
이 부분이 되게 신기하고 멋졌다.
근데 이 코드에 이런 댓글이 달렸던데
< It seems bit manipulation doesn't really help at all.>
조작하면 안좋은건가..
아무튼 저 코드를 보면서
비트 AND할당에 대해서 공부할 수 있었다 

(2)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
class Solution {
public:
    vector<string> findWords(vector<string>& words) {
        vector<unordered_set<char>> dict = {
            {'q', 'Q', 'w', 'W', 'e', 'E', 'r', 'R', 't', 'T', 'y', 'Y', 'u', 'U', 'i', 'I', 'o', 'O', 'p', 'P'},
            {'a', 'A', 's', 'S', 'd', 'D', 'f', 'F', 'g', 'G', 'h', 'H', 'j', 'J', 'k', 'K', 'l', 'L'},
            {'z', 'Z', 'x', 'X', 'c', 'C', 'v', 'V', 'b', 'B', 'n', 'N', 'm', 'M'}};
        
        vector<string> ans;
        for(auto &word : words) {
            vector<bool> d(3,true);
            for(auto & ch : word){
                for(int i = 0; i<3; i++)
                    if(d[i] && dict[i].find(ch) == dict[i].end())
                        d[i] = false;
            }
            if(d[0]||d[1]||d[2])
                ans.push_back(word);
        }
        return ans;
    }      
};
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
이 코드는 키보드 열 별로 배열을 각자 따로 만든 경우이다.
키보드랑 words의 단어 비교를 위해 bool 과 find() 함수와 end() 함수를 적절히 활용했다.







